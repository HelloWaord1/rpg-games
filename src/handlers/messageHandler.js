const UserManager = require('../services/userManager');
const { STAR_PRICES } = require('../config');
const RateLimiter = require('../utils/rateLimiter');
const MessageUpdater = require('../utils/messageUpdater');
const MessageUtils = require('../utils/messageUtils');
const Logger = require('../utils/logger');

class MessageHandler {
  static lastStartTime = new Map();
  static rateLimiter = new RateLimiter(2000);

  static async handleStart(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    
    // Prevent duplicate messages within 2 seconds
    const lastTime = this.lastStartTime.get(chatId);
    const now = Date.now();
    if (lastTime && now - lastTime < 2000) {
      return;
    }
    this.lastStartTime.set(chatId, now);
    
    await UserManager.initUser(userId);
    const balance = await UserManager.getBalance(userId);
    
    const keyboard = {
      inline_keyboard: [[
        { text: "–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ ‚öîÔ∏è", callback_data: "start_adventure" }
      ]]
    };

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –º–∏—Ä–µ –†—É–Ω—Ç–µ—Ä—Ä—ã! üåå

–í–∞—Å –∂–¥—ë—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ ¬´–ê—Ä–∫–µ–π–Ω¬ª ‚Äî —Å –∏–Ω—Ç—Ä–∏–≥–∞–º–∏, –∑–∞–≥–∞–¥–∫–∞–º–∏ –∏ –≤—ã–±–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –≤—Å—ë.

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –Ω–∞—à—É —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É –≤ –º–∏—Ä–µ –†—É–Ω—Ç–µ—Ä—Ä—ã?

–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚≠ê

–ö–æ–º–∞–Ω–¥—ã:
/topup - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å`;
    
    await bot.sendMessage(msg.chat.id, welcomeMessage, { reply_markup: keyboard });
  }

  static async handleStartAdventure(bot, openai, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    Logger.info('Starting adventure handler', { userId, chatId });
    
    const balance = await UserManager.getBalance(userId);
    Logger.debug('Current balance', { userId, balance });

    // Check balance before starting
    if (balance < 1) {
      Logger.info('Insufficient balance for adventure', { userId, balance });
      const keyboard = {
        inline_keyboard: Object.entries(STAR_PRICES).map(([stars]) => [{
          text: `‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${stars} –ó–≤–µ–∑–¥`,
          callback_data: `buy_${stars}`
        }])
      };
      await bot.sendMessage(msg.chat.id, 
        `üåå –û –Ω–µ—Ç! –í–∞—à–∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏—Å—Å—è–∫–ª–∞ –≤ –ø–æ—Ç–æ–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ –ó–∞—É–Ω–∞.\n\n` +
        `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã —á–µ—Ä–µ–∑ /topup ‚ö°`,
        { reply_markup: keyboard });
      return;
    }

    let sentMessage = null;
    let loadingMessage = null;
    try {
      loadingMessage = await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ...');
      Logger.debug('Sent loading message', { messageId: loadingMessage.message_id });
    } catch (error) {
      Logger.error('Failed to send initial message', error);
      return;
    }

    let fullResponse = '';

    const conversationHistory = [
      { role: "system", content: process.env.SYSTEM_PROMPT },
      { role: "system", content: process.env.DEFAULT_PROMPT || '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—é–∂–µ—Ç–∞.' },
      { role: "user", content: "Start a new adventure for me, describing the initial scene and asking what I want to do." }
    ];

    Logger.info('Preparing OpenAI conversation', { userId });

    try {
      Logger.info('Sending request to OpenAI', { userId });
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: conversationHistory,
        temperature: 0.8,
        max_tokens: 7000,
        presence_penalty: 0.7,
        frequency_penalty: 0.7
      });

      fullResponse = completion.choices[0].message.content;
      Logger.info('Received OpenAI response', { userId, length: fullResponse.length });

      // Delete loading message
      try {
        await bot.deleteMessage(chatId, loadingMessage.message_id);
      } catch (error) {
        Logger.error('Failed to delete loading message', error);
      }

      // Send complete response
      try {
        const messageParts = MessageUtils.splitMessage(fullResponse);
        for (const part of messageParts) {
          sentMessage = await bot.sendMessage(chatId, part);
          Logger.info('Sent message part', { 
            messageId: sentMessage.message_id,
            length: part.length 
          });
        }
      } catch (error) {
        Logger.error('Failed to send complete response', error);
        return;
      }

      // Only deduct stars if message was successfully delivered
      if (sentMessage && fullResponse) {
        Logger.info('Adventure message delivered', { userId, messageId: sentMessage.message_id });
        Logger.debug('Attempting to deduct stars', { userId, balance });
        try {
          await UserManager.deductStars(userId);
          Logger.info('Stars deducted successfully', { userId });
        } catch (error) {
          Logger.error('Failed to deduct stars', error);
          if (error.message === 'Insufficient balance') {
            await bot.sendMessage(chatId, 
              'üåå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.\n' +
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topup –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ‚≠ê');
          }
        }
      }

    } catch (error) {
      Logger.error('OpenAI API Error', error);
      await bot.sendMessage(msg.chat.id, 
        '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—É –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  static async handleMessage(bot, openai, msg) {
    // Skip commands and their responses
    if (!msg.text || msg.text.startsWith('/') || msg.via_bot) return;
    
    // Skip if this is a response to a command
    if (msg.reply_to_message?.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    if (!this.rateLimiter.canExecute(chatId)) {
      return;
    }

    const balance = await UserManager.getBalance(userId);
    
    if (balance < 1) {
      const keyboard = {
        inline_keyboard: Object.entries(STAR_PRICES).map(([stars, price]) => [{
          text: `‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${stars} –ó–≤–µ–∑–¥`,
          callback_data: `buy_${stars}`
        }])
      };

      await bot.sendMessage(msg.chat.id, 
        `üåå –ú–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏—Å—Å—è–∫–ª–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω—É–∂–Ω—ã –∑–≤—ë–∑–¥—ã —Å–∏–ª—ã.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topup —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏ ‚≠ê`,
        { reply_markup: keyboard });
      return;
    }

    let loadingMessage = await bot.sendMessage(msg.chat.id, '–û–±–¥—É–º—ã–≤–∞—é –≤–∞—à–∏ —Å–ª–æ–≤–∞...');
    let sentMessage = null;

    try {
      let conversationHistory = [];

      // Add system prompts to conversation history
      conversationHistory.push(
        { role: "system", content: process.env.SYSTEM_PROMPT },
        { role: "system", content: process.env.DEFAULT_PROMPT }
      );

      // Add user message
      conversationHistory.push({
        role: "user",
        content: msg.text
      });

      Logger.info('Sending request to OpenAI', { userId, messageLength: msg.text.length });

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: conversationHistory,
        temperature: 0.8,
        max_tokens: 7000,
        presence_penalty: 0.7,
        frequency_penalty: 0.7
      });

      const fullResponse = completion.choices[0].message.content;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
      if (!fullResponse || fullResponse.length < 10) {
        throw new Error('Invalid response from OpenAI');
      }
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
      try {
        await bot.deleteMessage(msg.chat.id, loadingMessage.message_id);
      } catch (error) {
        Logger.error('Failed to delete loading message', error);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
      Logger.info('Received response from OpenAI', { 
        userId, 
        responseLength: fullResponse.length 
      });
      
      // Delete loading message
      try {
        await bot.deleteMessage(msg.chat.id, loadingMessage.message_id);
        Logger.debug('Deleted loading message', { messageId: loadingMessage.message_id });
      } catch (error) {
        Logger.error('Failed to delete loading message', error);
      }

      // Split and send the response
      const messageParts = MessageUtils.splitMessage(fullResponse);
      
      if (messageParts.length === 0) {
        throw new Error('Empty response from OpenAI');
      }

      for (const part of messageParts) {
        if (!part.trim()) continue;
        await new Promise(resolve => setTimeout(resolve, 100)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        sentMessage = await bot.sendMessage(msg.chat.id, part);
        Logger.info('Sent message part', { 
          messageId: sentMessage.message_id,
          length: part.length 
        });
      }

      // Only deduct stars if message was successfully delivered
      if (sentMessage) {
        Logger.info('Message delivered successfully', { 
          userId,
          messageId: sentMessage.message_id 
        });
        try {
          await UserManager.deductStars(userId);
          Logger.info('Stars deducted successfully', { userId });
        } catch (error) {
          Logger.error('Failed to deduct stars', error);
          await bot.sendMessage(msg.chat.id, 
            'üåå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topup –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ‚≠ê');
        }
      }

    } catch (error) {
      Logger.error('Error in message handling', error);
      
      // Try to delete loading message if it exists
      try {
        if (loadingMessage) {
          await bot.deleteMessage(msg.chat.id, loadingMessage.message_id);
        }
      } catch (deleteError) {
        Logger.error('Failed to delete loading message after error', deleteError);
      }

      await bot.sendMessage(msg.chat.id, 
        '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

module.exports = MessageHandler;