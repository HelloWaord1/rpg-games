const PaymentService = require('../services/paymentService');
const UserManager = require('../services/userManager');
const { STAR_PRICES } = require('../config');

class PaymentHandler {
  static async handleRefillCommand(bot, msg) {
    const keyboard = {
      inline_keyboard: Object.entries(STAR_PRICES).map(([stars, price]) => [{
        text: `‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${stars} –ó–≤–µ–∑–¥ –∑–∞ ${price}$`,
        callback_data: `buy_${stars}`
      }])
    };

    await bot.sendMessage(msg.chat.id, 
      'üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–≤–µ–∑–¥ –¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏:',
      { reply_markup: keyboard }
    );
  }

  static async handleCallbackQuery(bot, query) {
    if (!query.data.startsWith('buy_')) return;

    const stars = parseInt(query.data.split('_')[1]);
    const price = STAR_PRICES[stars];
    
    if (!price) return;

    try {
      const invoice = PaymentService.createInvoice(stars, price);
      await bot.sendInvoice(
        query.message.chat.id,
        invoice.title,
        invoice.description,
        invoice.payload,
        invoice.provider_token,
        invoice.currency,
        invoice.prices
      );
    } catch (error) {
      console.error('Invoice creation error:', error);
      await bot.sendMessage(query.message.chat.id, 
        'Sorry, there was an error creating the payment. Please try again.');
    }
  }

  static async handleSuccessfulPayment(bot, msg) {
    const stars = parseInt(msg.successful_payment.invoice_payload.split('_')[1]);
    const paymentId = msg.successful_payment.telegram_payment_charge_id;
    const userId = msg.from.id;
    
    await UserManager.addPayment(userId, stars);
    
    await bot.sendMessage(msg.chat.id, 
      `‚ú® –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! ${stars} –ó–≤–µ–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–π –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª–µ.\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!`);
  }

  static async handleRefundCommand(bot, msg) {
    const userId = msg.from.id;
    const paymentId = UserManager.getPaymentId(userId);

    if (!paymentId) {
      await bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.");
      return;
    }

    try {
      await bot.refundStarPayment(userId, paymentId);
      await bot.sendMessage(msg.chat.id, "‚úÖ –í–∞—à–∏ –ó–≤–µ–∑–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.");
    } catch (error) {
      console.error('Refund error:', error);
      await bot.sendMessage(msg.chat.id, 
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
}

module.exports = PaymentHandler;